###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          30/Nov/2021  21:13:12
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\wheels.c
#    Command line  =  
#        -f C:\Users\aku_1\AppData\Local\Temp\EW5A92.tmp ("D:\Akshay\NCSU\4th
#        year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\wheels.c" -lC
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List" -o
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List\wheels.lst
#    Object file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj\wheels.r43
#
###############################################################################

D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\wheels.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the code for wheel movements
      4          // There are forward, turn left, turn right and stop movements
      5          //
      6          //  Akshay Kamalapuram Sridhar
      7          //  Sept 2021
      8          //  Built with IAR Embedded Workbench Version: V7.21.1
      9          // ------------------------------------------------------------------------------
     10          
     11          #include  "macros.h"

  #define end (8)
          ^
"D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\macros.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "end" (declared at line 211)
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          
     15          extern unsigned int Movement_Timer;
     16          extern unsigned int timer_flag;
     17          
     18          void movement(char direction, char duration);
     19          void forward_timed(int duration);
     20          void backward_timed(int duration);
     21          void turn_left_timed(int duration);
     22          void turn_right_timed(int duration);
     23          void stop_all_motors(void);
     24          void turn_both(unsigned int speed);
     25          
     26          //without time
     27          void move_forward(unsigned int speed);
     28          void move_backward(unsigned int speed);
     29          void turn_left(unsigned int speed);
     30          void turn_right(unsigned int speed);
     31          

   \                                 In  segment CODE, align 2
     32          void movement(char direction, char duration){
   \                     movement:
   \   000000   1B15         PUSHM.W #0x2, R11
   \   000002   4A4C         MOV.B   R12, R10
     33            int t=duration-ascii_0;
   \   000004   4B4D         MOV.B   R13, R11
   \   000006   3B50D0FF     ADD.W   #0xffd0, R11
     34            if (t<RESET_STATE || t>tenth_limit) t=(incrementer+incrementer);
   \   00000A   0B93         CMP.W   #0x0, R11
   \   00000C   0338         JL      ??movement_1
   \   00000E   3B900B00     CMP.W   #0xb, R11
   \   000012   0138         JL      ??movement_2
   \                     ??movement_1:
   \   000014   2B43         MOV.W   #0x2, R11
     35            if (direction==forward) forward_timed(t);
   \                     ??movement_2:
   \   000016   7A904600     CMP.B   #0x46, R10
   \   00001A   0420         JNE     ??movement_3
   \   00001C   0C4B         MOV.W   R11, R12
   \   00001E   ........     CALLA   #forward_timed
   \   000022   1A3C         JMP     ??movement_0
     36            else if (direction==B) backward_timed(t);
   \                     ??movement_3:
   \   000024   7A904200     CMP.B   #0x42, R10
   \   000028   0420         JNE     ??movement_4
   \   00002A   0C4B         MOV.W   R11, R12
   \   00002C   ........     CALLA   #backward_timed
   \   000030   133C         JMP     ??movement_0
     37            else if (direction==L) turn_left_timed(t);
   \                     ??movement_4:
   \   000032   7A904C00     CMP.B   #0x4c, R10
   \   000036   0420         JNE     ??movement_5
   \   000038   0C4B         MOV.W   R11, R12
   \   00003A   ........     CALLA   #turn_left_timed
   \   00003E   0C3C         JMP     ??movement_0
     38            else if (direction==right) turn_right_timed(t);
   \                     ??movement_5:
   \   000040   7A905200     CMP.B   #0x52, R10
   \   000044   0420         JNE     ??movement_6
   \   000046   0C4B         MOV.W   R11, R12
   \   000048   ........     CALLA   #turn_right_timed
   \   00004C   053C         JMP     ??movement_0
     39            else if (direction==S) stop_all_motors();
   \                     ??movement_6:
   \   00004E   7A905300     CMP.B   #0x53, R10
   \   000052   0220         JNE     ??movement_0
   \   000054   ........     CALLA   #stop_all_motors
     40          }
   \                     ??movement_0:
   \   000058   1A17         POPM.W  #0x2, R11
   \   00005A   1001         RETA
     41          

   \                                 In  segment CODE, align 2
     42          void forward_timed(int duration){
   \                     forward_timed:
   \   000000   0E4C         MOV.W   R12, R14
     43            move_forward(speed_val);
   \   000002   3C40204E     MOV.W   #0x4e20, R12
   \   000006   ........     CALLA   #move_forward
     44            if (Movement_Timer>=duration) {
   \   00000A   829E....     CMP.W   R14, &Movement_Timer
   \   00000E   0228         JNC     ??forward_timed_0
     45              timer_flag=ALWAYS;
   \   000010   9243....     MOV.W   #0x1, &timer_flag
     46            }  
     47          }
   \                     ??forward_timed_0:
   \   000014   1001         RETA
     48          

   \                                 In  segment CODE, align 2
     49          void backward_timed(int duration){
   \                     backward_timed:
   \   000000   0F4C         MOV.W   R12, R15
     50            move_backward(speed_val);
   \   000002   3C40204E     MOV.W   #0x4e20, R12
   \   000006   ........     CALLA   #move_backward
     51            if (Movement_Timer>=duration) {
   \   00000A   829F....     CMP.W   R15, &Movement_Timer
   \   00000E   0228         JNC     ??backward_timed_0
     52              timer_flag=ALWAYS;
   \   000010   9243....     MOV.W   #0x1, &timer_flag
     53            }  
     54          }
   \                     ??backward_timed_0:
   \   000014   1001         RETA
     55          

   \                                 In  segment CODE, align 2
     56          void turn_left_timed(int duration){
   \                     turn_left_timed:
   \   000000   0F4C         MOV.W   R12, R15
     57            turn_left(speed_val);
   \   000002   3C40204E     MOV.W   #0x4e20, R12
   \   000006   ........     CALLA   #turn_left
     58            if (Movement_Timer>=duration) {
   \   00000A   829F....     CMP.W   R15, &Movement_Timer
   \   00000E   0228         JNC     ??turn_left_timed_0
     59              timer_flag=ALWAYS;
   \   000010   9243....     MOV.W   #0x1, &timer_flag
     60            }  
     61          }
   \                     ??turn_left_timed_0:
   \   000014   1001         RETA
     62          

   \                                 In  segment CODE, align 2
     63          void turn_right_timed(int duration){
   \                     turn_right_timed:
   \   000000   0F4C         MOV.W   R12, R15
     64            turn_right(speed_val);
   \   000002   3C40204E     MOV.W   #0x4e20, R12
   \   000006   ........     CALLA   #turn_right
     65            if (Movement_Timer>=duration) {
   \   00000A   829F....     CMP.W   R15, &Movement_Timer
   \   00000E   0228         JNC     ??turn_right_timed_0
     66              timer_flag=ALWAYS;
   \   000010   9243....     MOV.W   #0x1, &timer_flag
     67            }  
     68          }  
   \                     ??turn_right_timed_0:
   \   000014   1001         RETA
     69          

   \                                 In  segment CODE, align 2
     70          void turn_both(unsigned int speed){
   \                     turn_both:
     71            LEFT_FORWARD_SPEED = speed;  
   \   000000   824C5404     MOV.W   R12, &0x454
     72            RIGHT_REVERSE_SPEED =speed;
   \   000004   824C5A04     MOV.W   R12, &0x45a
     73          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_TB3CCR1_L
   \   00000A                REQUIRE _A_TB3CCR4_L
     74          

   \                                 In  segment CODE, align 2
     75          void stop_all_motors(void){
   \                     stop_all_motors:
     76            RIGHT_FORWARD_SPEED = WHEEL_OFF;
   \   000000   82435604     MOV.W   #0x0, &0x456
     77            LEFT_FORWARD_SPEED = WHEEL_OFF;
   \   000004   82435404     MOV.W   #0x0, &0x454
     78            RIGHT_REVERSE_SPEED = WHEEL_OFF;
   \   000008   82435A04     MOV.W   #0x0, &0x45a
     79            LEFT_REVERSE_SPEED = WHEEL_OFF;
   \   00000C   82435804     MOV.W   #0x0, &0x458
     80          }  
   \   000010   1001         RETA
   \   000012                REQUIRE _A_TB3CCR2_L
   \   000012                REQUIRE _A_TB3CCR1_L
   \   000012                REQUIRE _A_TB3CCR4_L
   \   000012                REQUIRE _A_TB3CCR3_L
     81          

   \                                 In  segment CODE, align 2
     82          void move_forward(unsigned int speed){
   \                     move_forward:
     83            RIGHT_FORWARD_SPEED = speed+speed_val; // P6.0 Right Forward PWM ON amount
   \   000000   0F4C         MOV.W   R12, R15
   \   000002   3F50204E     ADD.W   #0x4e20, R15
   \   000006   824F5604     MOV.W   R15, &0x456
     84            LEFT_FORWARD_SPEED = speed; // P6.1 Left Forward PWM ON amount
   \   00000A   824C5404     MOV.W   R12, &0x454
     85          }
   \   00000E   1001         RETA
   \   000010                REQUIRE _A_TB3CCR2_L
   \   000010                REQUIRE _A_TB3CCR1_L
     86          

   \                                 In  segment CODE, align 2
     87          void move_backward(unsigned int speed){
   \                     move_backward:
     88            RIGHT_REVERSE_SPEED = speed; // P6.0 Right Forward PWM ON amount
   \   000000   824C5A04     MOV.W   R12, &0x45a
     89            LEFT_REVERSE_SPEED = speed; // P6.1 Left Forward PWM ON amount
   \   000004   824C5804     MOV.W   R12, &0x458
     90          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_TB3CCR4_L
   \   00000A                REQUIRE _A_TB3CCR3_L
     91          

   \                                 In  segment CODE, align 2
     92          void turn_left(unsigned int speed){
   \                     turn_left:
     93            RIGHT_FORWARD_SPEED = speed;
   \   000000   824C5604     MOV.W   R12, &0x456
     94            LEFT_FORWARD_SPEED = speed; 
   \   000004   824C5404     MOV.W   R12, &0x454
     95          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_TB3CCR2_L
   \   00000A                REQUIRE _A_TB3CCR1_L
     96          

   \                                 In  segment CODE, align 2
     97          void turn_right(unsigned int speed){
   \                     turn_right:
     98            LEFT_FORWARD_SPEED = speed;  
   \   000000   824C5404     MOV.W   R12, &0x454
     99            RIGHT_FORWARD_SPEED =speed;
   \   000004   824C5604     MOV.W   R12, &0x456
    100          }
   \   000008   1001         RETA
   \   00000A                REQUIRE _A_TB3CCR1_L
   \   00000A                REQUIRE _A_TB3CCR2_L
    101          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   backward_timed
        4   -> move_backward
      4   forward_timed
        4   -> move_forward
      4   move_backward
      4   move_forward
      8   movement
        8   -> backward_timed
        8   -> forward_timed
        8   -> stop_all_motors
        8   -> turn_left_timed
        8   -> turn_right_timed
      4   stop_all_motors
      4   turn_both
      4   turn_left
      4   turn_left_timed
        4   -> turn_left
      4   turn_right
      4   turn_right_timed
        4   -> turn_right


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
      22  backward_timed
      22  forward_timed
      10  move_backward
      16  move_forward
      92  movement
      18  stop_all_motors
      10  turn_both
      10  turn_left
      22  turn_left_timed
      10  turn_right
      22  turn_right_timed

 
 254 bytes in segment CODE
   8 bytes in segment DATA16_AN
 
 254 bytes of CODE memory
   0 bytes of DATA memory (+ 8 bytes shared)

Errors: none
Warnings: 1
