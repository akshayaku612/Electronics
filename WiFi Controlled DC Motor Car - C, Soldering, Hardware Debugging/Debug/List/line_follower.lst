###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          30/Nov/2021  21:13:11
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\line_follower.c
#    Command line  =  
#        -f C:\Users\aku_1\AppData\Local\Temp\EW56B0.tmp ("D:\Akshay\NCSU\4th
#        year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\line_follower.c" -lC
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List" -o
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List\line_follower.lst
#    Object file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj\line_follower.r43
#
###############################################################################

D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\line_follower.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the code for the entire black line following
      4          //
      5          //
      6          //  Akshay Kamalapuram Sridhar
      7          //  Nov 2021
      8          //  Built with IAR Embedded Workbench Version: V7.21.1
      9          // ------------------------------------------------------------------------------
     10          
     11          #include  "macros.h"

  #define end (8)
          ^
"D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\macros.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "end" (declared at line 211)
     12          #include  "msp430.h"
     13          #include  "functions.h"
     14          
     15          extern unsigned int left_detector_avg;
     16          extern unsigned int right_detector_avg;
     17          extern unsigned int follow_flag;
     18          extern unsigned int line_follower_timer_flag;
     19          extern volatile unsigned char display_changed;
     20          extern unsigned int sw2_pressed;
     21          extern char display_line[NUM_DISPLAY_lINES][NUM_lINES_LAYER];
     22          extern unsigned int timer_flag;
     23          extern unsigned int Movement_Timer;
     24          extern unsigned int Circle_Timer;
     25          extern unsigned int prepare_display_flag;
     26          extern unsigned int sw1_pressed;
     27          extern unsigned int flag;
     28          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int sw2_press_count=RESET_STATE;
   \                     sw2_press_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int traverse_state=RESET_STATE;
   \                     traverse_state:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int assign_black_value=RESET_STATE;
   \                     assign_black_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int black_border_value=RESET_STATE;
   \                     black_border_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int turn_left_flag=RESET_STATE;
   \                     turn_left_flag:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int display_calibration_flag=RESET_STATE;
   \                     display_calibration_flag:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int circle_timer_flag=RESET_STATE;
   \                     circle_timer_flag:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int line_follower_state=RESET_STATE;
   \                     line_follower_state:
   \   000000                DS8 2
     37          
     38          void turn_time(void);
     39          void line_traversal(void);
     40          void setThreshold(void);
     41          void intercept_line(void);
     42          void intercept_turn(void);
     43          void follow_black_line(void);
     44          void turn_towards_center(void);
     45          void move_towards_center(void);
     46          void turn_2(void);
     47          
     48          //high level function for line traversal

   \                                 In  segment CODE, align 2
     49          void line_traversal(void){
   \                     line_traversal:
     50            switch(traverse_state){
   \   000000   1F42....     MOV.W   &traverse_state, R15
   \   000004   0F83         SUB.W   #0x0, R15
   \   000006   0F24         JEQ     ??line_traversal_3
   \   000008   1F83         SUB.W   #0x1, R15
   \   00000A   1E24         JEQ     ??line_traversal_4
   \   00000C   1F83         SUB.W   #0x1, R15
   \   00000E   1F24         JEQ     ??line_traversal_5
   \   000010   1F83         SUB.W   #0x1, R15
   \   000012   2024         JEQ     ??line_traversal_6
   \   000014   1F83         SUB.W   #0x1, R15
   \   000016   2824         JEQ     ??line_traversal_7
   \   000018   1F83         SUB.W   #0x1, R15
   \   00001A   2924         JEQ     ??line_traversal_8
   \   00001C   2F83         SUB.W   #0x2, R15
   \   00001E   2D24         JEQ     ??line_traversal_9
   \   000020   1F83         SUB.W   #0x1, R15
   \   000022   2824         JEQ     ??line_traversal_10
   \   000024   1001         RETA
     51              case initial_state:
     52                if (sw1_pressed) {
   \                     ??line_traversal_3:
   \   000026   8293....     CMP.W   #0x0, &sw1_pressed
   \   00002A   7624         JEQ     ??line_traversal_2
     53                  traverse_state=pause;
   \   00002C   B2400700.... MOV.W   #0x7, &traverse_state
     54                  line_follower_state=initial_state;
   \   000032   8243....     MOV.W   #0x0, &line_follower_state
     55                  strcpy(display_line[DISPLAY_lINE_1], "BL Start  ");
                         ^
Warning[Pe223]: function "strcpy" declared implicitly
   \   000036   3D40....     MOV.W   #`?<Constant "BL Start  ">`, R13
   \   00003A   3C40....     MOV.W   #display_line + 11, R12
   \   00003E   ........     CALLA   #strcpy
     56                  prepare_display_flag=incrementer;
   \   000042   9243....     MOV.W   #0x1, &prepare_display_flag
     57                }  
     58                break;
   \   000046   1001         RETA
     59              case black_intercept:
     60                intercept_line();
   \                     ??line_traversal_4:
   \   000048   ........     CALLA   #intercept_line
     61                break;
   \   00004C   1001         RETA
     62              case black_turn:
     63                intercept_turn();
   \                     ??line_traversal_5:
   \   00004E   ........     CALLA   #intercept_turn
     64                break; 
   \   000052   1001         RETA
     65              case line_follow:
     66                if(!circle_timer_flag){
   \                     ??line_traversal_6:
   \   000054   8293....     CMP.W   #0x0, &circle_timer_flag
   \   000058   0420         JNE     ??line_traversal_11
     67                  Circle_Timer=initial_state;
   \   00005A   8243....     MOV.W   #0x0, &Circle_Timer
     68                  circle_timer_flag=ALWAYS;
   \   00005E   9243....     MOV.W   #0x1, &circle_timer_flag
     69                }
     70                follow_black_line();
   \                     ??line_traversal_11:
   \   000062   ........     CALLA   #follow_black_line
     71                break;
   \   000066   1001         RETA
     72              case turn_to_center:
     73                turn_towards_center();
   \                     ??line_traversal_7:
   \   000068   ........     CALLA   #turn_towards_center
     74                break;
   \   00006C   1001         RETA
     75              case move_to_center:
     76                move_towards_center();
   \                     ??line_traversal_8:
   \   00006E   ........     CALLA   #move_towards_center
     77                break;
   \   000072   1001         RETA
     78              case end:
     79                stop_all_motors();
                       ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \                     ??line_traversal_10:
   \   000074   ........     CALLA   #stop_all_motors
     80                break;
   \   000078   1001         RETA
     81              case pause:
     82                if (!timer_flag) wait(seconds_2);
                                        ^
Warning[Pe223]: function "wait" declared implicitly
   \                     ??line_traversal_9:
   \   00007A   8293....     CMP.W   #0x0, &timer_flag
   \   00007E   0420         JNE     ??line_traversal_12
   \   000080   2C43         MOV.W   #0x2, R12
   \   000082   ........     CALLA   #wait
   \   000086   1001         RETA
     83                else {
     84                  stop_all_motors();
   \                     ??line_traversal_12:
   \   000088   ........     CALLA   #stop_all_motors
     85                  traverse_state=line_follower_state+incrementer;
   \   00008C   1F42....     MOV.W   &line_follower_state, R15
   \   000090   1F53         ADD.W   #0x1, R15
   \   000092   824F....     MOV.W   R15, &traverse_state
     86                  timer_flag=RESET_STATE;
   \   000096   8243....     MOV.W   #0x0, &timer_flag
     87                  Movement_Timer=RESET_STATE;
   \   00009A   8243....     MOV.W   #0x0, &Movement_Timer
     88                  if (traverse_state==black_intercept) strcpy(display_line[DISPLAY_lINE_0], "Intercept ");
                                                              ^
Warning[Pe223]: function "strcpy" declared implicitly
   \   00009E   9293....     CMP.W   #0x1, &traverse_state
   \   0000A2   0720         JNE     ??line_traversal_13
   \   0000A4   3D40....     MOV.W   #`?<Constant "Intercept ">`, R13
   \   0000A8   3C40....     MOV.W   #display_line, R12
   \   0000AC   ........     CALLA   #strcpy
   \   0000B0   1001         RETA
     89                  else if (traverse_state==black_turn) strcpy(display_line[DISPLAY_lINE_0], "BL Travel ");
                                                              ^
Warning[Pe223]: function "strcpy" declared implicitly
   \                     ??line_traversal_13:
   \   0000B2   A293....     CMP.W   #0x2, &traverse_state
   \   0000B6   0720         JNE     ??line_traversal_14
   \   0000B8   3D40....     MOV.W   #`?<Constant "BL Travel ">`, R13
   \   0000BC   3C40....     MOV.W   #display_line, R12
   \   0000C0   ........     CALLA   #strcpy
   \   0000C4   1001         RETA
     90                  else if (traverse_state==line_follow) strcpy(display_line[DISPLAY_lINE_0],"BL Circle ");
                                                               ^
Warning[Pe223]: function "strcpy" declared implicitly
   \                     ??line_traversal_14:
   \   0000C6   B2900300.... CMP.W   #0x3, &traverse_state
   \   0000CC   0720         JNE     ??line_traversal_15
   \   0000CE   3D40....     MOV.W   #`?<Constant "BL Circle ">`, R13
   \   0000D2   3C40....     MOV.W   #display_line, R12
   \   0000D6   ........     CALLA   #strcpy
   \   0000DA   1001         RETA
     91                  else if (traverse_state==turn_to_center) strcpy(display_line[DISPLAY_lINE_0]," Exit Turn");
                                                                  ^
Warning[Pe223]: function "strcpy" declared implicitly
   \                     ??line_traversal_15:
   \   0000DC   A292....     CMP.W   #0x4, &traverse_state
   \   0000E0   0720         JNE     ??line_traversal_16
   \   0000E2   3D40....     MOV.W   #`?<Constant " Exit Turn">`, R13
   \   0000E6   3C40....     MOV.W   #display_line, R12
   \   0000EA   ........     CALLA   #strcpy
   \   0000EE   1001         RETA
     92                  else if (traverse_state==move_to_center) strcpy(display_line[DISPLAY_lINE_0]," Exit Move");
                                                                  ^
Warning[Pe223]: function "strcpy" declared implicitly
   \                     ??line_traversal_16:
   \   0000F0   B2900500.... CMP.W   #0x5, &traverse_state
   \   0000F6   0720         JNE     ??line_traversal_17
   \   0000F8   3D40....     MOV.W   #`?<Constant " Exit Move">`, R13
   \   0000FC   3C40....     MOV.W   #display_line, R12
   \   000100   ........     CALLA   #strcpy
   \   000104   1001         RETA
     93                  else if (traverse_state==end) strcpy(display_line[DISPLAY_lINE_0]," BL Exit  ");
                                                       ^
Warning[Pe223]: function "strcpy" declared implicitly
   \                     ??line_traversal_17:
   \   000106   B292....     CMP.W   #0x8, &traverse_state
   \   00010A   0620         JNE     ??line_traversal_2
   \   00010C   3D40....     MOV.W   #`?<Constant " BL Exit  ">`, R13
   \   000110   3C40....     MOV.W   #display_line, R12
   \   000114   ........     CALLA   #strcpy
     94                }
     95                break;  
     96              default: break;  
     97            }  
     98          }  
   \                     ??line_traversal_2:
   \   000118   1001         RETA
     99          
    100          //calibration for detectors

   \                                 In  segment CODE, align 2
    101          void setThreshold(void){
   \                     setThreshold:
    102            if (sw2_pressed && !assign_black_value){ //assigning value of black_border_value
   \   000000   8293....     CMP.W   #0x0, &sw2_pressed
   \   000004   1B24         JEQ     ??setThreshold_0
   \   000006   8293....     CMP.W   #0x0, &assign_black_value
   \   00000A   1820         JNE     ??setThreshold_0
    103              if (sw2_press_count==RESET_STATE) {
   \   00000C   8293....     CMP.W   #0x0, &sw2_press_count
   \   000010   0A20         JNE     ??setThreshold_1
    104                black_border_value=right_detector_avg;
   \   000012   9242........ MOV.W   &right_detector_avg, &black_border_value
    105                sw2_press_count++;
   \   000018   9253....     ADD.W   #0x1, &sw2_press_count
    106                sw2_pressed=FALSE;
   \   00001C   8243....     MOV.W   #0x0, &sw2_pressed
    107                display_calibration_flag=ALWAYS;
   \   000020   9243....     MOV.W   #0x1, &display_calibration_flag
   \   000024   1001         RETA
    108              }
    109              else {
    110                black_border_value=(black_border_value+right_detector_avg)/2;
   \                     ??setThreshold_1:
   \   000026   1F42....     MOV.W   &black_border_value, R15
   \   00002A   1F52....     ADD.W   &right_detector_avg, R15
   \   00002E   5F03         RRUM.W  #0x1, R15
   \   000030   824F....     MOV.W   R15, &black_border_value
    111                assign_black_value=ALWAYS;
   \   000034   9243....     MOV.W   #0x1, &assign_black_value
    112                sw2_pressed=FALSE;
   \   000038   8243....     MOV.W   #0x0, &sw2_pressed
    113              }
    114            }
    115          }
   \                     ??setThreshold_0:
   \   00003C   1001         RETA
    116          
    117          //intercept line function

   \                                 In  segment CODE, align 2
    118          void intercept_line(void){
   \                     intercept_line:
    119            if (line_follower_timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &line_follower_timer_flag
   \   000004   0324         JEQ     ??intercept_line_0
    120              stop_all_motors();
                     ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \   000006   ........     CALLA   #stop_all_motors
   \   00000A   1001         RETA
    121            }
    122            else if (follow_flag){
   \                     ??intercept_line_0:
   \   00000C   8293....     CMP.W   #0x0, &follow_flag
   \   000010   1724         JEQ     ??intercept_line_1
    123              move_forward(speed_val);
                     ^
Warning[Pe223]: function "move_forward" declared implicitly
   \   000012   3C40204E     MOV.W   #0x4e20, R12
   \   000016   ........     CALLA   #move_forward
    124              if (right_detector_avg>=black_border_value || left_detector_avg>=black_border_value){ //finding black line when going forward
   \   00001A   9292........ CMP.W   &black_border_value, &right_detector_avg
   \   000020   042C         JC      ??intercept_line_2
   \   000022   9292........ CMP.W   &black_border_value, &left_detector_avg
   \   000028   0B28         JNC     ??intercept_line_1
    125                stop_all_motors();
                       ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \                     ??intercept_line_2:
   \   00002A   ........     CALLA   #stop_all_motors
    126                follow_flag=RESET_STATE;
   \   00002E   8243....     MOV.W   #0x0, &follow_flag
    127                line_follower_state=black_intercept;
   \   000032   9243....     MOV.W   #0x1, &line_follower_state
    128                traverse_state=pause;
   \   000036   B2400700.... MOV.W   #0x7, &traverse_state
    129                Movement_Timer=RESET_STATE;
   \   00003C   8243....     MOV.W   #0x0, &Movement_Timer
    130              }
    131            }  
    132          }
   \                     ??intercept_line_1:
   \   000040   1001         RETA
    133          
    134          //turning on the line after interception

   \                                 In  segment CODE, align 2
    135          void turn_2(void){
   \                     turn_2:
    136            if (timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &timer_flag
   \   000004   0924         JEQ     ??turn_2_0
    137               traverse_state=pause;
   \   000006   B2400700.... MOV.W   #0x7, &traverse_state
    138               line_follower_state=black_turn;
   \   00000C   A243....     MOV.W   #0x2, &line_follower_state
    139               traverse_state=pause;
   \   000010   B2400700.... MOV.W   #0x7, &traverse_state
    140               return;
   \   000016   1001         RETA
    141            }
    142            movement(right, seconds2_str);
                   ^
Warning[Pe223]: function "movement" declared implicitly
   \                     ??turn_2_0:
   \   000018   3D403200     MOV.W   #0x32, R13
   \   00001C   3C405200     MOV.W   #0x52, R12
   \   000020   ........     CALLA   #movement
    143          }  
   \   000024   1001         RETA
    144          
    145          //timed turning on the line

   \                                 In  segment CODE, align 2
    146          void turn_time(void){
   \                     turn_time:
    147            if (timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &timer_flag
   \   000004   0924         JEQ     ??turn_time_0
    148               traverse_state=pause;
   \   000006   B2400700.... MOV.W   #0x7, &traverse_state
    149               line_follower_state=black_turn;
   \   00000C   A243....     MOV.W   #0x2, &line_follower_state
    150               traverse_state=pause;
   \   000010   B2400700.... MOV.W   #0x7, &traverse_state
    151               return;
   \   000016   1001         RETA
    152            }
    153           turn_right_timed(seconds_2);
                  ^
Warning[Pe223]: function "turn_right_timed" declared implicitly
   \                     ??turn_time_0:
   \   000018   2C43         MOV.W   #0x2, R12
   \   00001A   ........     CALLA   #turn_right_timed
    154          }
   \   00001E   1001         RETA
    155          
    156          //moving forward 

   \                                 In  segment CODE, align 2
    157          void forward_time(void){
   \                     forward_time:
    158            if (timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &timer_flag
   \   000004   0924         JEQ     ??forward_time_0
    159               traverse_state=pause;
   \   000006   B2400700.... MOV.W   #0x7, &traverse_state
    160               line_follower_state=black_turn;
   \   00000C   A243....     MOV.W   #0x2, &line_follower_state
    161               traverse_state=pause;
   \   000010   B2400700.... MOV.W   #0x7, &traverse_state
    162               return;
   \   000016   1001         RETA
    163            }
    164           forward_timed(seconds_2);
                  ^
Warning[Pe223]: function "forward_timed" declared implicitly
   \                     ??forward_time_0:
   \   000018   2C43         MOV.W   #0x2, R12
   \   00001A   ........     CALLA   #forward_timed
    165          }
   \   00001E   1001         RETA
    166          
    167          //intercept turning function

   \                                 In  segment CODE, align 2
    168          void intercept_turn(void){
   \                     intercept_turn:
    169            if (flag) {
   \   000000   8293....     CMP.W   #0x0, &flag
   \   000004   0324         JEQ     ??intercept_turn_0
    170              stop_all_motors();
                     ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \   000006   ........     CALLA   #stop_all_motors
   \   00000A   1001         RETA
    171            }  
    172            else if (follow_flag){
   \                     ??intercept_turn_0:
   \   00000C   8293....     CMP.W   #0x0, &follow_flag
   \   000010   1724         JEQ     ??intercept_turn_1
    173              turn_both(speed_val);
                     ^
Warning[Pe223]: function "turn_both" declared implicitly
   \   000012   3C40204E     MOV.W   #0x4e20, R12
   \   000016   ........     CALLA   #turn_both
    174              if (right_detector_avg>=black_border_value && left_detector_avg<black_border_value){ //finding black line when going forward
   \   00001A   9292........ CMP.W   &black_border_value, &right_detector_avg
   \   000020   0F28         JNC     ??intercept_turn_1
   \   000022   9292........ CMP.W   &black_border_value, &left_detector_avg
   \   000028   0B2C         JC      ??intercept_turn_1
    175                stop_all_motors();
                       ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \   00002A   ........     CALLA   #stop_all_motors
    176                follow_flag=RESET_STATE;
   \   00002E   8243....     MOV.W   #0x0, &follow_flag
    177                line_follower_state=black_turn;
   \   000032   A243....     MOV.W   #0x2, &line_follower_state
    178                traverse_state=pause;
   \   000036   B2400700.... MOV.W   #0x7, &traverse_state
    179                Movement_Timer=RESET_STATE;
   \   00003C   8243....     MOV.W   #0x0, &Movement_Timer
    180              }
    181            }
    182          }  
   \                     ??intercept_turn_1:
   \   000040   1001         RETA
    183          
    184          //circle following

   \                                 In  segment CODE, align 2
    185          void follow_black_line(void){
   \                     follow_black_line:
    186            if (line_follower_timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &line_follower_timer_flag
   \   000004   0724         JEQ     ??follow_black_line_3
    187              stop_all_motors();
                     ^
Warning[Pe223]: function "stop_all_motors" declared implicitly
   \   000006   ........     CALLA   #stop_all_motors
    188              move_forward(speed_val);
                     ^
Warning[Pe223]: function "move_forward" declared implicitly
   \   00000A   3C40204E     MOV.W   #0x4e20, R12
   \   00000E   ........     CALLA   #move_forward
   \   000012   1001         RETA
    189            }  
    190            else {
    191              if (right_detector_avg>=(black_border_value-avg_value) && left_detector_avg>=(black_border_value-avg_value)){
   \                     ??follow_black_line_3:
   \   000014   1F42....     MOV.W   &black_border_value, R15
   \   000018   3F50F7FF     ADD.W   #0xfff7, R15
   \   00001C   829F....     CMP.W   R15, &right_detector_avg
   \   000020   1628         JNC     ??follow_black_line_4
   \   000022   1F42....     MOV.W   &black_border_value, R15
   \   000026   3F50F7FF     ADD.W   #0xfff7, R15
   \   00002A   829F....     CMP.W   R15, &left_detector_avg
   \   00002E   0F28         JNC     ??follow_black_line_4
    192                if (turn_left_flag) {
   \   000030   8293....     CMP.W   #0x0, &turn_left_flag
   \   000034   0524         JEQ     ??follow_black_line_5
    193                  turn_right(speed_val);
                         ^
Warning[Pe223]: function "turn_right" declared implicitly
   \   000036   3C40204E     MOV.W   #0x4e20, R12
   \   00003A   ........     CALLA   #turn_right
   \   00003E   3A3C         JMP     ??follow_black_line_2
    194                } 
    195                else {
    196                  turn_left(speed_val);
                         ^
Warning[Pe223]: function "turn_left" declared implicitly
   \                     ??follow_black_line_5:
   \   000040   3C40204E     MOV.W   #0x4e20, R12
   \   000044   ........     CALLA   #turn_left
    197                  turn_left_flag=RESET_STATE;
   \   000048   8243....     MOV.W   #0x0, &turn_left_flag
   \   00004C   333C         JMP     ??follow_black_line_2
    198                }  
    199              }  
    200              else if (right_detector_avg>=(black_border_value-avg_value) && left_detector_avg<(black_border_value+avg_value)){
   \                     ??follow_black_line_4:
   \   00004E   1F42....     MOV.W   &black_border_value, R15
   \   000052   3F50F7FF     ADD.W   #0xfff7, R15
   \   000056   829F....     CMP.W   R15, &right_detector_avg
   \   00005A   0E28         JNC     ??follow_black_line_6
   \   00005C   1F42....     MOV.W   &black_border_value, R15
   \   000060   3F500900     ADD.W   #0x9, R15
   \   000064   829F....     CMP.W   R15, &left_detector_avg
   \   000068   072C         JC      ??follow_black_line_6
    201                move_forward(speed_val);
                       ^
Warning[Pe223]: function "move_forward" declared implicitly
   \   00006A   3C40204E     MOV.W   #0x4e20, R12
   \   00006E   ........     CALLA   #move_forward
    202                turn_left_flag=RESET_STATE;
   \   000072   8243....     MOV.W   #0x0, &turn_left_flag
   \   000076   1E3C         JMP     ??follow_black_line_2
    203              } 
    204              else if (left_detector_avg<black_border_value && right_detector_avg<black_border_value){
   \                     ??follow_black_line_6:
   \   000078   9292........ CMP.W   &black_border_value, &left_detector_avg
   \   00007E   0C2C         JC      ??follow_black_line_7
   \   000080   9292........ CMP.W   &black_border_value, &right_detector_avg
   \   000086   082C         JC      ??follow_black_line_7
    205                if (turn_left_flag) return;
   \   000088   8293....     CMP.W   #0x0, &turn_left_flag
   \   00008C   1520         JNE     ??follow_black_line_0
    206                turn_right(speed_val);
                       ^
Warning[Pe223]: function "turn_right" declared implicitly
   \   00008E   3C40204E     MOV.W   #0x4e20, R12
   \   000092   ........     CALLA   #turn_right
   \   000096   0E3C         JMP     ??follow_black_line_2
    207              }
    208              else if (left_detector_avg>=black_border_value && right_detector_avg<black_border_value) {
   \                     ??follow_black_line_7:
   \   000098   9292........ CMP.W   &black_border_value, &left_detector_avg
   \   00009E   0A28         JNC     ??follow_black_line_2
   \   0000A0   9292........ CMP.W   &black_border_value, &right_detector_avg
   \   0000A6   062C         JC      ??follow_black_line_2
    209                turn_left(speed_val);
                       ^
Warning[Pe223]: function "turn_left" declared implicitly
   \   0000A8   3C40204E     MOV.W   #0x4e20, R12
   \   0000AC   ........     CALLA   #turn_left
    210                turn_left_flag=ALWAYS;
   \   0000B0   9243....     MOV.W   #0x1, &turn_left_flag
    211              }
    212              follow_flag=RESET_STATE;
   \                     ??follow_black_line_2:
   \   0000B4   8243....     MOV.W   #0x0, &follow_flag
    213            }  
    214          }
   \                     ??follow_black_line_0:
   \   0000B8   1001         RETA
    215          
    216          //turning towards center after finishing 2 circle rounds

   \                                 In  segment CODE, align 2
    217          void turn_towards_center(void){
   \                     turn_towards_center:
    218            if (timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &timer_flag
   \   000004   0624         JEQ     ??turn_towards_center_0
    219               traverse_state=pause;
   \   000006   B2400700.... MOV.W   #0x7, &traverse_state
    220               line_follower_state=turn_to_center;
   \   00000C   A242....     MOV.W   #0x4, &line_follower_state
    221               return;
   \   000010   1001         RETA
    222            }
    223            movement(right, seconds2_str);
                   ^
Warning[Pe223]: function "movement" declared implicitly
   \                     ??turn_towards_center_0:
   \   000012   3D403200     MOV.W   #0x32, R13
   \   000016   3C405200     MOV.W   #0x52, R12
   \   00001A   ........     CALLA   #movement
    224          }  
   \   00001E   1001         RETA
    225          
    226          //moving towards center

   \                                 In  segment CODE, align 2
    227          void move_towards_center(void){
   \                     move_towards_center:
    228            if (timer_flag) {
   \   000000   8293....     CMP.W   #0x0, &timer_flag
   \   000004   0724         JEQ     ??move_towards_center_0
    229               traverse_state=pause;
   \   000006   B2400700.... MOV.W   #0x7, &traverse_state
    230               line_follower_state=move_to_center;
   \   00000C   B2400500.... MOV.W   #0x5, &line_follower_state
    231               return;
   \   000012   1001         RETA
    232            }
    233            movement(forward, seconds2_str);
                   ^
Warning[Pe223]: function "movement" declared implicitly
   \                     ??move_towards_center_0:
   \   000014   3D403200     MOV.W   #0x32, R13
   \   000018   3C404600     MOV.W   #0x46, R12
   \   00001C   ........     CALLA   #movement
    234          }  
   \   000020   1001         RETA

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BL Start  ">`:
   \   000000   424C20537461 DC8 "BL Start  "
   \            7274202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "Intercept ">`:
   \   000000   496E74657263 DC8 "Intercept "
   \            6570742000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BL Travel ">`:
   \   000000   424C20547261 DC8 "BL Travel "
   \            76656C2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "BL Circle ">`:
   \   000000   424C20436972 DC8 "BL Circle "
   \            636C652000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Exit Turn">`:
   \   000000   204578697420 DC8 " Exit Turn"
   \            5475726E00  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " Exit Move">`:
   \   000000   204578697420 DC8 " Exit Move"
   \            4D6F766500  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " BL Exit  ">`:
   \   000000   20424C204578 DC8 " BL Exit  "
   \            6974202000  
    235          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   follow_black_line
        4   -> move_forward
        4   -> stop_all_motors
        4   -> turn_left
        4   -> turn_right
      4   forward_time
        4   -> forward_timed
      4   intercept_line
        4   -> move_forward
        4   -> stop_all_motors
      4   intercept_turn
        4   -> stop_all_motors
        4   -> turn_both
      4   line_traversal
        4   -> follow_black_line
        4   -> intercept_line
        4   -> intercept_turn
        4   -> move_towards_center
        4   -> stop_all_motors
        4   -> strcpy
        4   -> turn_towards_center
        4   -> wait
      4   move_towards_center
        4   -> movement
      4   setThreshold
      4   turn_2
        4   -> movement
      4   turn_time
        4   -> turn_right_timed
      4   turn_towards_center
        4   -> movement


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant " BL Exit  ">
      11  ?<Constant " Exit Move">
      11  ?<Constant " Exit Turn">
      11  ?<Constant "BL Circle ">
      11  ?<Constant "BL Start  ">
      11  ?<Constant "BL Travel ">
      11  ?<Constant "Intercept ">
       2  assign_black_value
       2  black_border_value
       2  circle_timer_flag
       2  display_calibration_flag
     186  follow_black_line
      32  forward_time
      66  intercept_line
      66  intercept_turn
       2  line_follower_state
     282  line_traversal
      34  move_towards_center
      62  setThreshold
       2  sw2_press_count
       2  traverse_state
      38  turn_2
       2  turn_left_flag
      32  turn_time
      32  turn_towards_center

 
 830 bytes in segment CODE
  77 bytes in segment DATA16_C
  16 bytes in segment DATA16_Z
 
 830 bytes of CODE  memory
  77 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: 28
