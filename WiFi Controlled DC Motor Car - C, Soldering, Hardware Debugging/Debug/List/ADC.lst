###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          30/Nov/2021  21:13:10
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\ADC.c
#    Command line  =  
#        -f C:\Users\aku_1\AppData\Local\Temp\EW5233.tmp ("D:\Akshay\NCSU\4th
#        year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\ADC.c" -lC
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List" -o
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List\ADC.lst
#    Object file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj\ADC.r43
#
###############################################################################

D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\ADC.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the ADC Initialization
      4          //
      5          //  Akshay Kamalapuram Sridhar
      6          //  Sept 2021
      7          //  Built with IAR Embedded Workbench Version: V7.12.1
      8          // ------------------------------------------------------------------------------
      9          
     10          #include  "macros.h"

  #define end (8)
          ^
"D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\macros.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "end" (declared at line 211)
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADCCTL1_L
   \                     _A_ADCCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADCCTL2_L
   \                     _A_ADCCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADCIE_L
   \                     _A_ADCIE_L:
   \   000000                DS8 2
     12          #include  "functions.h"
     13          
     14          void Init_ADC(void);
     15          

   \                                 In  segment CODE, align 2
     16          void Init_ADC(void){
   \                     Init_ADC:
     17          //------------------------------------------------------------------------------
     18          // V_DETECT_L (0x04) // Pin 2 A2
     19          // V_DETECT_R (0x08) // Pin 3 A3
     20          // V_THUMB (0x20) // Pin 5 A5
     21          //------------------------------------------------------------------------------
     22          // ADCCTL0 Register
     23            ADCCTL0 = RESET_STATE; // Reset
   \   000000   82430007     MOV.W   #0x0, &0x700
     24            ADCCTL0 |= ADCSHT_2; // 16 ADC clocks
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     25            ADCCTL0 |= ADCMSC; // MSC
   \   00000A   B2D080000007 BIS.W   #0x80, &0x700
     26            ADCCTL0 |= ADCON; // ADC ON
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     27          // ADCCTL1 Register
     28            ADCCTL1 = RESET_STATE; // Reset
   \   000016   82430207     MOV.W   #0x0, &0x702
     29            ADCCTL1 |= ADCSHS_0; // 00b = ADCSC bit
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     30            ADCCTL1 |= ADCSHP; // ADC sample-and-hold SAMPCON signal from sampling timer.
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     31            ADCCTL1 &= ~ADCISSH; // ADC invert signal sample-and-hold.
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     32            ADCCTL1 |= ADCDIV_0; // ADC clock divider - 000b = Divide by 1
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     33            ADCCTL1 |= ADCSSEL_0; // ADC clock MODCLK
   \   000032   924202070207 MOV.W   &0x702, &0x702
     34            ADCCTL1 |= ADCCONSEQ_0; // ADC conversion sequence 00b = Single-channel single-conversion
   \   000038   924202070207 MOV.W   &0x702, &0x702
     35          // ADCCTL1 & ADCBUSY identifies a conversion is in process
     36          // ADCCTL2 Register
     37            ADCCTL2 = RESET_STATE; // Reset
   \   00003E   82430407     MOV.W   #0x0, &0x704
     38            ADCCTL2 |= ADCPDIV0; // ADC pre-divider 00b = Pre-divide by 1
   \   000042   B2D000010407 BIS.W   #0x100, &0x704
     39            ADCCTL2 |= ADCRES_0; // ADC resolution 8b
   \   000048   924204070407 MOV.W   &0x704, &0x704
     40            ADCCTL2 &= ~ADCDF; // ADC data read-back format 0b = Binary unsigned.
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     41            ADCCTL2 &= ~ADCSR; // ADC sampling rate 0b = ADC buffer supports up to 200 ksps
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     42          // ADCMCTL0 Register
     43            ADCMCTL0 |= ADCSREF_0; // VREF - 000b = {VR+ = AVCC and VRâ€“ = AVSS }
   \   000056   92420A070A07 MOV.W   &0x70a, &0x70a
     44            ADCMCTL0 |= ADCINCH_2; // 
   \   00005C   A2D30A07     BIS.W   #0x2, &0x70a
     45            ADCIE |= ADCIE0; // Enable ADC conv complete interrupt
   \   000060   92D31A07     BIS.W   #0x1, &0x71a
     46            ADCCTL0 |= ADCENC; // ADC enable conversion.
   \   000064   A2D30007     BIS.W   #0x2, &0x700
     47            ADCCTL0 |= ADCSC; // ADC start conversion.
   \   000068   92D30007     BIS.W   #0x1, &0x700
     48          }
   \   00006C   1001         RETA
   \   00006E                REQUIRE _A_ADCCTL0_L
   \   00006E                REQUIRE _A_ADCCTL1_L
   \   00006E                REQUIRE _A_ADCCTL2_L
   \   00006E                REQUIRE _A_ADCMCTL0_L
   \   00006E                REQUIRE _A_ADCIE_L

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_ADC


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     110  Init_ADC
       2  _A_ADCCTL0_L
       2  _A_ADCCTL1_L
       2  _A_ADCCTL2_L
       2  _A_ADCIE_L
       2  _A_ADCMCTL0_L

 
 110 bytes in segment CODE
  10 bytes in segment DATA16_AN
 
 110 bytes of CODE memory
   0 bytes of DATA memory (+ 10 bytes shared)

Errors: none
Warnings: 1
