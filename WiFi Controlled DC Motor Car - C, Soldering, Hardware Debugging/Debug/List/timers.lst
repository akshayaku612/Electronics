###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          30/Nov/2021  21:13:12
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\timers.c
#    Command line  =  
#        -f C:\Users\aku_1\AppData\Local\Temp\EW5A41.tmp ("D:\Akshay\NCSU\4th
#        year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\timers.c" -lC
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List" -o
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List\timers.lst
#    Object file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj\timers.r43
#
###############################################################################

D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\timers.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the code to initialize timers
      4          // It initializes the timer B0 which is used for time_sequence, debounce interrupts for switches and lcd display
      5          //
      6          //  Akshay Kamalapuram Sridhar
      7          //  Sept 2021
      8          //  Built with IAR Embedded Workbench Version: V7.21.1
      9          // ------------------------------------------------------------------------------
     10          
     11          #include  "macros.h"

  #define end (8)
          ^
"D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\macros.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "end" (declared at line 211)
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          
     15          // ------------------------------------------------------------------------------
     16          //
     17          //  Description: This file contains the code to initialize timers
     18          // It initializes the timer B0 which is used for time_sequence, debounce interrupts for switches and lcd display
     19          //
     20          //  Akshay Kamalapuram Sridhar
     21          //  Sept 2021
     22          //  Built with IAR Embedded Workbench Version: V7.21.1
     23          // ------------------------------------------------------------------------------

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          unsigned int timer_flag=0;
   \                     timer_flag:
   \   000000                DS8 2
     25          extern unsigned int Movement_Timer;
     26          
     27          void Init_Timer_B0(void);
     28          void Init_Timer_B1(void);
     29          void Init_Timer_B3(void);
     30          void wait(int duration);
     31          
     32          //------------------------------------------------------------------------------
     33          // Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow

   \                                 In  segment CODE, align 2
     34          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     35            TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     36            TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     37            TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     38            TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     39            TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     40            TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240A8619203 MOV.W   #0x61a8, &0x392
     41            TB0CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D010008203 BIS.W   #0x10, &0x382
     42            TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000028   B24070179403 MOV.W   #0x1770, &0x394
     43            TB0CCTL1 |= CCIE; // CCR1 enable interrupt
   \   00002E   B2D010008403 BIS.W   #0x10, &0x384
     44            TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
   \   000034   B24010279603 MOV.W   #0x2710, &0x396
     45            TB0CCTL2 |= CCIE; // CCR2 enable interrupt
   \   00003A   B2D010008603 BIS.W   #0x10, &0x386
     46            TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000040   A2C38003     BIC.W   #0x2, &0x380
     47            TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000044   92C38003     BIC.W   #0x1, &0x380
     48          }
   \   000048   1001         RETA
   \   00004A                REQUIRE _A_TB0CTL_L
   \   00004A                REQUIRE _A_TB0EX0_L
   \   00004A                REQUIRE _A_TB0CCR0_L
   \   00004A                REQUIRE _A_TB0CCTL0_L
   \   00004A                REQUIRE _A_TB0CCR1_L
   \   00004A                REQUIRE _A_TB0CCTL1_L
   \   00004A                REQUIRE _A_TB0CCR2_L
   \   00004A                REQUIRE _A_TB0CCTL2_L
     49          
     50          //timer for movement

   \                                 In  segment CODE, align 2
     51          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     52            TB1CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B2400002C003 MOV.W   #0x200, &0x3c0
     53            TB1CTL |= TBCLR; // Resets TB1R, clock divider, count direction
   \   000006   A2D2C003     BIS.W   #0x4, &0x3c0
     54            TB1CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D02000C003 BIS.W   #0x20, &0x3c0
     55            TB1CTL |= ID__2; // Divide clock by 2
   \   000010   B2D04000C003 BIS.W   #0x40, &0x3c0
     56            TB1EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700E003 MOV.W   #0x7, &0x3e0
     57            TB1CCR0 = TB1CCR0_INTERVAL; // CCR0
   \   00001C   B24050C3D203 MOV.W   #0xc350, &0x3d2
     58            TB1CCTL0 |= CCIE; //CCR0 disable interrupt
   \   000022   B2D01000C203 BIS.W   #0x10, &0x3c2
     59            TB1CCR1 = TB1CCR1_INTERVAL; // CCR1
   \   000028   B240C409D403 MOV.W   #0x9c4, &0x3d4
     60            TB1CCTL1 |= CCIE; // CCR1 enable interrupt
   \   00002E   B2D01000C403 BIS.W   #0x10, &0x3c4
     61            TB1CCR2 = TB1CCR2_INTERVAL; // CCR2
   \   000034   B2401400D603 MOV.W   #0x14, &0x3d6
     62            TB1CCTL2 |= CCIE; // CCR2 enable interrupt
   \   00003A   B2D01000C603 BIS.W   #0x10, &0x3c6
     63            TB1CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000040   A2C3C003     BIC.W   #0x2, &0x3c0
     64            TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000044   92C3C003     BIC.W   #0x1, &0x3c0
     65          }
   \   000048   1001         RETA
   \   00004A                REQUIRE _A_TB1CTL_L
   \   00004A                REQUIRE _A_TB1EX0_L
   \   00004A                REQUIRE _A_TB1CCR0_L
   \   00004A                REQUIRE _A_TB1CCTL0_L
   \   00004A                REQUIRE _A_TB1CCR1_L
   \   00004A                REQUIRE _A_TB1CCTL1_L
   \   00004A                REQUIRE _A_TB1CCR2_L
   \   00004A                REQUIRE _A_TB1CCTL2_L
     66          
     67          //PWM timer

   \                                 In  segment CODE, align 2
     68          void Init_Timer_B3(void) {
   \                     Init_Timer_B3:
     69          //------------------------------------------------------------------------------
     70          // SMCLK source, up count mode, PWM Right Side
     71          // TB3.1 P6.0 R_FORWARD
     72          // TB3.2 P6.1 L_FORWARD
     73          // TB3.3 P6.2 R_REVERSE
     74          // TB3.4 P6.3 L_REVERSE
     75          //------------------------------------------------------------------------------
     76           TB3CTL = TBSSEL__SMCLK; // SMCLK
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     77           TB3CTL |= MC__UP; // Up Mode
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
     78           TB3CTL |= TBCLR; // Clear TAR
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
     79           TB3CCR0 = PWM_PERIOD; // PWM Period
   \   000010   B24050C35204 MOV.W   #0xc350, &0x452
     80           TB3CCTL1 = OUTMOD_7; // CCR1 reset/set
   \   000016   B240E0004404 MOV.W   #0xe0, &0x444
     81           RIGHT_FORWARD_SPEED = FALSE; // P6.0 Right Forward PWM duty cycle
   \   00001C   82435604     MOV.W   #0x0, &0x456
     82           TB3CCTL2 = OUTMOD_7; // CCR2 reset/set
   \   000020   B240E0004604 MOV.W   #0xe0, &0x446
     83           LEFT_FORWARD_SPEED = FALSE; // P6.1 Left Forward PWM duty cycle
   \   000026   82435404     MOV.W   #0x0, &0x454
     84           TB3CCTL3 = OUTMOD_7; // CCR3 reset/set
   \   00002A   B240E0004804 MOV.W   #0xe0, &0x448
     85           RIGHT_REVERSE_SPEED = FALSE; // P6.2 Right Reverse PWM duty cycle
   \   000030   82435A04     MOV.W   #0x0, &0x45a
     86           TB3CCTL4 = OUTMOD_7; // CCR4 reset/set
   \   000034   B240E0004A04 MOV.W   #0xe0, &0x44a
     87           LEFT_REVERSE_SPEED = FALSE; // P6.3 Left Reverse PWM duty cycle
   \   00003A   82435804     MOV.W   #0x0, &0x458
     88          //------------------------------------------------------------------------------
     89          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_TB3CTL_L
   \   000040                REQUIRE _A_TB3CCR0_L
   \   000040                REQUIRE _A_TB3CCTL1_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCTL2_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCTL3_L
   \   000040                REQUIRE _A_TB3CCR4_L
   \   000040                REQUIRE _A_TB3CCTL4_L
   \   000040                REQUIRE _A_TB3CCR3_L
     90          

   \                                 In  segment CODE, align 2
     91          void wait(int duration){
   \                     wait:
     92           if (Movement_Timer>=duration) timer_flag=1;
   \   000000   829C....     CMP.W   R12, &Movement_Timer
   \   000004   0228         JNC     ??wait_0
   \   000006   9243....     MOV.W   #0x1, &timer_flag
     93          }  
   \                     ??wait_0:
   \   00000A   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B3
      4   wait


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      74  Init_Timer_B0
      74  Init_Timer_B1
      64  Init_Timer_B3
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L
       2  timer_flag
      12  wait

 
 224 bytes in segment CODE
  52 bytes in segment DATA16_AN
   2 bytes in segment DATA16_Z
 
 224 bytes of CODE memory
   2 bytes of DATA memory (+ 52 bytes shared)

Errors: none
Warnings: 1
