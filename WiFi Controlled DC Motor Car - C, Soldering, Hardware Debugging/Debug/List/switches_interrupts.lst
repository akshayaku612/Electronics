###############################################################################
#
# IAR C/C++ Compiler V7.21.1.1000/W32 for MSP430          30/Nov/2021  21:13:11
# Copyright 1996-2021 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.21
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\switches_interrupts.c
#    Command line  =  
#        -f C:\Users\aku_1\AppData\Local\Temp\EW58A9.tmp ("D:\Akshay\NCSU\4th
#        year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\switches_interrupts.c" -lC
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List" -o
#        "D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e
#        --double=32 --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.5\430\lib\dlib\dl430xlsfn.h" -I ./ --core=430X
#        --data_model=small -On --multiplier=32 --hw_workaround=CPU40
#        --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\List\switches_interrupts.lst
#    Object file   =  
#        D:\Akshay\NCSU\4th year\Fall 2021\ECE
#        306\Project\KamalapuramSridhar_Akshay\Debug\Obj\switches_interrupts.r43
#
###############################################################################

D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\switches_interrupts.c
      1          // ------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the code to create the switch interrupts
      4          // It includes the Pragma vector and the ISR for all the switch interrupts
      5          //
      6          //  Akshay Kamalapuram Sridhar
      7          //  Oct 2021
      8          //  Built with IAR Embedded Workbench Version: V7.21.1
      9          // ------------------------------------------------------------------------------
     10          
     11          #include  "macros.h"

  #define end (8)
          ^
"D:\Akshay\NCSU\4th year\Fall 2021\ECE 306\Project\KamalapuramSridhar_Akshay\macros.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "end" (declared at line 211)
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
     13          #include  "functions.h"
     14          #include <string.h>
     15          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int sw1_pressed_interrupt=FALSE;
   \                     sw1_pressed_interrupt:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int sw2_pressed_interrupt=FALSE;
   \                     sw2_pressed_interrupt:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int sw2_pressed=FALSE;
   \                     sw2_pressed:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned int sw1_pressed=FALSE;
   \                     sw1_pressed:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned int prepare_display_flag=FALSE;
   \                     prepare_display_flag:
   \   000000                DS8 2
     21          
     22          // ------------------------------------------------------------------------------
     23          //
     24          //  Description: This file contains the code to create the switch interrupts
     25          // It includes the Pragma vector and the ISR for all the switch interrupts
     26          //
     27          //  Akshay Kamalapuram Sridhar
     28          //  Oct 2021
     29          //  Built with IAR Embedded Workbench Version: V7.21.1
     30          //
     31          //  ISR contains interrupt for the toggling the switch
     32          //
     33          // ------------------------------------------------------------------------------
     34          
     35          #pragma vector=PORT4_VECTOR

   \                                 In  segment ISR_CODE, align 2
     36          __interrupt void switchP4_interrupt(void){
   \                     switchP4_interrupt:
     37          //Switch 1
     38            if (P4IFG & SW1) {
   \   000000   E2B33D02     BIT.B   #0x2, &0x23d
   \   000004   0B28         JNC     ??switchP4_interrupt_0
     39              P4IFG &= ~SW1; // IFG SW1 cleared
   \   000006   E2C33D02     BIC.B   #0x2, &0x23d
     40              P4IE &= ~SW1; // P2.6 interrupt disabled
   \   00000A   E2C33B02     BIC.B   #0x2, &0x23b
     41              P6OUT ^= LCD_BACKLITE;
   \   00000E   F2E010004302 XOR.B   #0x10, &0x243
     42              sw1_pressed_interrupt=TRUE;
   \   000014   9243....     MOV.W   #0x1, &sw1_pressed_interrupt
     43              sw1_pressed=TRUE;
   \   000018   9243....     MOV.W   #0x1, &sw1_pressed
     44            }  
     45          }
   \                     ??switchP4_interrupt_0:
   \   00001C   0013         RETI
   \   00001E                REQUIRE _A_PBIFG_L
   \   00001E                REQUIRE _A_PBIE_L
   \   00001E                REQUIRE _A_PCOUT_L
     46          
     47          // ------------------------------------------------------------------------------
     48          //
     49          //  Description: This file contains the code to create the switch interrupts
     50          // It includes the Pragma vector and the ISR for all the switch interrupts
     51          //
     52          //  Akshay Kamalapuram Sridhar
     53          //  Oct 2021
     54          //  Built with IAR Embedded Workbench Version: V7.21.1
     55          //
     56          //  ISR contains interrupt for the toggling the switch
     57          //
     58          // ------------------------------------------------------------------------------
     59          
     60          #pragma vector=PORT2_VECTOR

   \                                 In  segment ISR_CODE, align 2
     61          __interrupt void switchP2_interrupt(void){
   \                     switchP2_interrupt:
     62          // Switch 2
     63            if (P2IFG & SW2) {
   \   000000   F2B21D02     BIT.B   #0x8, &0x21d
   \   000004   0B28         JNC     ??switchP2_interrupt_0
     64              P2IFG &= ~SW2; // IFG SW2 cleared
   \   000006   F2C21D02     BIC.B   #0x8, &0x21d
     65              P2IE &= ~SW2; // P2.6 interrupt disabled
   \   00000A   F2C21B02     BIC.B   #0x8, &0x21b
     66              P6OUT ^= LCD_BACKLITE;
   \   00000E   F2E010004302 XOR.B   #0x10, &0x243
     67              sw2_pressed_interrupt=TRUE;
   \   000014   9243....     MOV.W   #0x1, &sw2_pressed_interrupt
     68              sw2_pressed=TRUE;
   \   000018   9243....     MOV.W   #0x1, &sw2_pressed
     69            }   
     70          }
   \                     ??switchP2_interrupt_0:
   \   00001C   0013         RETI
   \   00001E                REQUIRE _A_PAIFG_L
   \   00001E                REQUIRE _A_PAIE_L
   \   00001E                REQUIRE _A_PCOUT_L

   \                                 In  segment INTVEC, offset 0x2c, root
   \                     `??switchP4_interrupt::??INTVEC 44`:
   \   00002C   ....         DC16    switchP4_interrupt

   \                                 In  segment INTVEC, offset 0x30, root
   \                     `??switchP2_interrupt::??INTVEC 48`:
   \   000030   ....         DC16    switchP2_interrupt

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   switchP2_interrupt
      4   switchP4_interrupt


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PCOUT_L
       2  prepare_display_flag
       2  sw1_pressed
       2  sw1_pressed_interrupt
       2  sw2_pressed
       2  sw2_pressed_interrupt
      30  switchP2_interrupt
       2  switchP2_interrupt::??INTVEC 48
      30  switchP4_interrupt
       2  switchP4_interrupt::??INTVEC 44

 
 10 bytes in segment DATA16_AN
 10 bytes in segment DATA16_Z
  4 bytes in segment INTVEC
 60 bytes in segment ISR_CODE
 
 60 bytes of CODE  memory
  0 bytes of CONST memory (+  4 bytes shared)
 10 bytes of DATA  memory (+ 10 bytes shared)

Errors: none
Warnings: 1
